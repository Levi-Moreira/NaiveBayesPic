
# 1 "src/prediction.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 54 "src/../include/defines.h"
const float testSet[30][77];
const float means[10][77 - 1];
const float stdevs[10][77 - 1];
unsigned int confusionMatrix[10][10];

# 30 "C:\Program Files (x86)\Microchip\xc8\v1.37\include\math.h"
extern double fabs(double);
extern double floor(double);
extern double ceil(double);
extern double modf(double, double *);
extern double sqrt(double);
extern double atof(const char *);
extern double sin(double) ;
extern double cos(double) ;
extern double tan(double) ;
extern double asin(double) ;
extern double acos(double) ;
extern double atan(double);
extern double atan2(double, double) ;
extern double log(double);
extern double log10(double);
extern double pow(double, double) ;
extern double exp(double) ;
extern double sinh(double) ;
extern double cosh(double) ;
extern double tanh(double);
extern double eval_poly(double, const double *, int);
extern double frexp(double, int *);
extern double ldexp(double, int);
extern double fmod(double, double);
extern double trunc(double);
extern double round(double);

# 26 "src/prediction.c"
float calculateProbability(float x, float mean, float stdev)
{
double exponent = exp(-(pow(x-mean,2)/(2*pow(stdev,2))));

double res = (1 / (sqrt(2*3.141592653589793) * stdev)) * exponent;
if(res == 0.0)
{
return 0.0;
}
else
{
return log(res);
}
}

# 47
float calculateClassProbability(int classNumber, float *inputVector)
{
int i;
float classProbability = 0;

for(i = 0; i<77-1; i++)
{

classProbability+=calculateProbability(inputVector[i], means[classNumber][i], stdevs[classNumber][i] );
}

return classProbability;

}

# 74
int predict(float *inputVector) {

int i;


float classProb;


float bestProb = -1;


int bestLabel = -1;

for(i = 0; i < 10; i++) {
classProb = calculateClassProbability(i, inputVector);

if((bestLabel==-1) || (classProb > bestProb)) {
bestProb = classProb;
bestLabel = i;
}
}

return bestLabel;

}

# 110
void calculateMetrics()
{

int i,j;

for(i = 0; i<10; i++)
{
for(j = 0; j<10; j++)
confusionMatrix[i][j] = 0;
}


int prediction;

for(i = 0; i < (2000 - ((int) ((2000 * 0.95) + 1))); i++) {
prediction = predict(testSet[i]);
confusionMatrix[(int)testSet[i][77-1]][prediction]++;
}

}

# 136
float getAccuracy() {

int i;


int correct = 0;


int prediction;

for(i = 0; i < (2000 - ((int) ((2000 * 0.95) + 1))); i++) {
prediction = predict(testSet[i]);

if(prediction == (int) testSet[i][77 - 1]) {
correct++;
}
}


return (((float) correct) / (2000 - ((int) ((2000 * 0.95) + 1)))) * 100;

}

# 167
float getRecall(int class)
{
int i;
int sum = 0;
for(i = 0; i<10;i++)
{
sum+=confusionMatrix[class][i];
}

return (confusionMatrix[class][class]/(float)sum);
}

# 186
float getPrecision(int class) {
int i;
int sum = 0;
for(i = 0; i<10;i++)
{
sum+=confusionMatrix[i][class];
}
return (confusionMatrix[class][class]/(float)sum);
}

# 200
void printMetrics()
{
printf("\n------------------Metrics for the Model---------------------------\n");
int i;
for(i = 0; i<10; i++)
{
printf("Metrics for Class %d\n", i);
printf("Precision %2.2f\n", getPrecision(i));
printf("Recall %2.2f\n",getRecall(i) );
printf("\n");
}

printf("\nModel Accuracy considering %d test entries: %f%%\n", getAccuracy(),(2000 - ((int) ((2000 * 0.95) + 1))));
}
